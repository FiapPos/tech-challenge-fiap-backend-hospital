services:
  appointment-db:
    image: postgres:16-alpine # Versão fixada para evitar quebras
    container_name: appointment-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=appointments
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - appointment-db-data:/var/lib/postgresql/data # Volume para persistência

  usuario-db:
    image: postgres:16-alpine # Versão fixada
    container_name: usuario-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=usuarios
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432
    volumes:
      - usuario-db-data:/var/lib/postgresql/data # Volume para persistência

  agendamento-db:
    image: postgres:16-alpine # Versão fixada
    container_name: agendamento-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=agendamentos
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5434:5432
    volumes:
      - agendamento-db-data:/var/lib/postgresql/data # Volume para persistência

  historico-db:
    image: postgres:16-alpine # Versão fixada
    container_name: historico-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=historico
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5435:5432
    volumes:
      - historico-db-data:/var/lib/postgresql/data # Volume para persistência

  hospital-db:
    image: postgres:16-alpine
    container_name: hospital-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=hospitais
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5436:5432
    volumes:
      - hospital-db-data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    networks:
      - orchestrator-saga
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data   # Volume para dados
      - zookeeper-log:/var/lib/zookeeper/log     # Volume para logs

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: "unless-stopped" # Alterado para reiniciar automaticamente
    networks:
      - orchestrator-saga
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data # Alterado para volume nomeado

  redpanda-console:
    image: redpandadata/console:latest
    container_name: redpanda-console # Nome do container ajustado
    restart: on-failure
    networks:
      - orchestrator-saga
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - kafka

  appointment-service:
    build: './appointment-service'
    container_name: appointment-service
    depends_on:
      - appointment-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://appointment-db:5432/appointments
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
      - JWT_SECRET=hospital-microservices-shared-jwt-secret-key-2025
      - HISTORICO_SERVICE_URL=http://historico-service:3003
    ports:
      - 3005:3002

  usuario-service:
    build: './usuario-service'
    container_name: usuario-service
    networks:
      - orchestrator-saga
    depends_on:
      - usuario-db
      - kafka
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://usuario-db:5432/usuarios
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
      - JWT_SECRET=hospital-microservices-shared-jwt-secret-key-2025
    ports:
      - 3001:3000

  agendamento-service:
    build: './agendamento-service'
    container_name: agendamento-service
    depends_on:
      - agendamento-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://agendamento-db:5432/agendamentos
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
    ports:
      - 3002:3000

  historico-service:
    build: './historico-service'
    container_name: historico-service
    depends_on:
      - historico-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://historico-db:5432/historico
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
    ports:
      - 3003:3003

  notificacao-service:
    build: './notificacao-service'
    container_name: notificacao-service
    networks:
      - orchestrator-saga
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
    ports:
      - 3004:3000

  hospital-service:
    build: './hospital-service'
    container_name: hospital-service
    depends_on:
      - hospital-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://hospital-db:5432/hospitais
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
    ports:
      - 3006:3000

  orchestrator-service:
    build: './orchestrator-service'
    container_name: orchestrator-service
    depends_on:
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - SPRING_CLOUD_CONFIG_ENABLED=false
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
    ports:
      - 8080:8080

networks:
  orchestrator-saga:
    driver: bridge

  # Declaração de todos os volumes nomeados
volumes:
  appointment-db-data:
  usuario-db-data:
  agendamento-db-data:
  historico-db-data:
  hospital-db-data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
