<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/hospital-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.5&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.fiap.techchallenge&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;hospital-service&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;hospital-service&lt;/name&gt;&#10;&#9;&lt;description&gt;ServiÃ§o que gerencia hospitais&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;21&lt;/java.version&gt;&#10;&#9;&#9;&lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-restdocs-mockmvc&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.jetbrains&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;annotations&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;24.0.0&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;compile&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;jakarta.validation&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#9;&lt;dependencyManagement&gt;&#10;&#9;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;${spring-cloud.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;type&gt;pom&lt;/type&gt;&#10;&#9;&#9;&#9;&#9;&lt;scope&gt;import&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;/dependencies&gt;&#10;&#9;&lt;/dependencyManagement&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;image&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;runImage&gt;paketobuildpacks/ubuntu-noble-run-base:latest&lt;/runImage&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/image&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;excludes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/excludes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.asciidoctor&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;asciidoctor-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;2.2.1&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;executions&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;generate-docs&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;prepare-package&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;process-asciidoc&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;backend&gt;html&lt;/backend&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;doctype&gt;book&lt;/doctype&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&lt;/executions&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-restdocs-asciidoctor&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;version&gt;${spring-restdocs.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependencies&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.5&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.fiap.techchallenge&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;hospital-service&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;hospital-service&lt;/name&gt;&#10;&#9;&lt;description&gt;ServiÃ§o que gerencia hospitais&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;21&lt;/java.version&gt;&#10;&#9;&#9;&lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-restdocs-mockmvc&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.jetbrains&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;annotations&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;24.0.0&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;compile&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;jakarta.validation&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#9;&lt;dependencyManagement&gt;&#10;&#9;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;${spring-cloud.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;type&gt;pom&lt;/type&gt;&#10;&#9;&#9;&#9;&#9;&lt;scope&gt;import&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;/dependencies&gt;&#10;&#9;&lt;/dependencyManagement&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;image&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;runImage&gt;paketobuildpacks/ubuntu-noble-run-base:latest&lt;/runImage&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/image&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;excludes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/excludes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.asciidoctor&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;asciidoctor-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;2.2.1&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;executions&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;generate-docs&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;prepare-package&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;process-asciidoc&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;backend&gt;html&lt;/backend&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;doctype&gt;book&lt;/doctype&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&lt;/executions&gt;&#10;&#9;&#9;&#9;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-restdocs-asciidoctor&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;version&gt;${spring-restdocs.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&#9;&#9;&lt;/dependencies&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/NotificacaoServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/NotificacaoServiceApplication.java" />
              <option name="originalContent" value="package com.fiap.techchallenge.notificacao_service;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class NotificacaoServiceApplication {&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SpringApplication.run(NotificacaoServiceApplication.class, args);&#10;&#9;}&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.fiap.techchallenge.hospital_service;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class HospitalServiceApplication {&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SpringApplication.run(NotificacaoServiceApplication.class, args);&#10;&#9;}&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/controller/HospitalController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/controller/HospitalController.java" />
              <option name="originalContent" value="package com.fiap.techchallenge.hospital_service.core.controller;&#10;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalRequest;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalResponse;&#10;import com.fiap.techchallenge.hospital_service.core.service.HospitalService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/hospitais&quot;)&#10;@RequiredArgsConstructor&#10;public class HospitalController {&#10;&#10;    private final HospitalService hospitalService;&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;HospitalResponse&gt; criarHospital(@Valid @RequestBody HospitalRequest request) {&#10;        HospitalResponse response = hospitalService.criarHospital(request);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;HospitalResponse&gt;&gt; listarHospitais() {&#10;        List&lt;HospitalResponse&gt; hospitais = hospitalService.listarTodosHospitais();&#10;        return ResponseEntity.ok(hospitais);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;HospitalResponse&gt; buscarHospitalPorId(@PathVariable String id) {&#10;        HospitalResponse hospital = hospitalService.buscarPorId(id);&#10;        return ResponseEntity.ok(hospital);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;HospitalResponse&gt; atualizarHospital(@PathVariable String id,&#10;                                                             @Valid @RequestBody HospitalRequest request) {&#10;        HospitalResponse response = hospitalService.atualizarHospital(id, request);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.fiap.techchallenge.hospital_service.core.controller;&#10;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalRequest;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalResponse;&#10;import com.fiap.techchallenge.hospital_service.core.service.HospitalService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/hospitais&quot;)&#10;@RequiredArgsConstructor&#10;public class HospitalController {&#10;&#10;    private final HospitalService hospitalService;&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;HospitalResponse&gt; criarHospital(@Valid @RequestBody HospitalRequest request) {&#10;        HospitalResponse response = hospitalService.criarHospital(request);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;HospitalResponse&gt;&gt; listarHospitais() {&#10;        List&lt;HospitalResponse&gt; hospitais = hospitalService.listarTodosHospitais();&#10;        return ResponseEntity.ok(hospitais);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;HospitalResponse&gt; buscarHospitalPorId(@PathVariable Long id) {&#10;        HospitalResponse hospital = hospitalService.buscarPorId(id);&#10;        return ResponseEntity.ok(hospital);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;HospitalResponse&gt; atualizarHospital(@PathVariable Long id,&#10;                                                             @Valid @RequestBody HospitalRequest request) {&#10;        HospitalResponse response = hospitalService.atualizarHospital(id, request);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/dto/HospitalResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/dto/HospitalResponse.java" />
              <option name="originalContent" value="package com.fiap.techchallenge.hospital_service.core.dto;&#10;&#10;import lombok.Data;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;public class HospitalResponse {&#10;&#10;    private String id;&#10;    private String nome;&#10;    private String endereco;&#10;    private String telefone;&#10;    private String email;&#10;    private String especialidades;&#10;    private Boolean ativo;&#10;    private LocalDateTime criadoEm;&#10;    private LocalDateTime atualizadoEm;&#10;}&#10;" />
              <option name="updatedContent" value="package com.fiap.techchallenge.hospital_service.core.dto;&#10;&#10;import lombok.Data;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;public class HospitalResponse {&#10;&#10;    private Long id;&#10;    private String nome;&#10;    private String endereco;&#10;    private String telefone;&#10;    private String email;&#10;    private String especialidades;&#10;    private Boolean ativo;&#10;    private LocalDateTime criadoEm;&#10;    private LocalDateTime atualizadoEm;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/repository/HospitalRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/repository/HospitalRepository.java" />
              <option name="originalContent" value="package com.fiap.techchallenge.hospital_service.core.repository;&#10;&#10;import com.fiap.techchallenge.hospital_service.core.entity.Hospital;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface HospitalRepository extends JpaRepository&lt;Hospital, String&gt; {&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findAllAtivos();&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.id = :id AND h.ativo = true&quot;)&#10;    Optional&lt;Hospital&gt; findByIdAndAtivo(@Param(&quot;id&quot;) String id);&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.nome LIKE %:nome% AND h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findByNomeContainingIgnoreCaseAndAtivo(@Param(&quot;nome&quot;) String nome);&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.especialidades LIKE %:especialidade% AND h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findByEspecialidadesContainingIgnoreCaseAndAtivo(@Param(&quot;especialidade&quot;) String especialidade);&#10;}&#10;" />
              <option name="updatedContent" value="package com.fiap.techchallenge.hospital_service.core.repository;&#10;&#10;import com.fiap.techchallenge.hospital_service.core.entity.Hospital;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface HospitalRepository extends JpaRepository&lt;Hospital, Long&gt; {&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findAllAtivos();&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.id = :id AND h.ativo = true&quot;)&#10;    Optional&lt;Hospital&gt; findByIdAndAtivo(@Param(&quot;id&quot;) Long id);&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.nome LIKE %:nome% AND h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findByNomeContainingIgnoreCaseAndAtivo(@Param(&quot;nome&quot;) String nome);&#10;&#10;    @Query(&quot;SELECT h FROM Hospital h WHERE h.especialidades LIKE %:especialidade% AND h.ativo = true&quot;)&#10;    List&lt;Hospital&gt; findByEspecialidadesContainingIgnoreCaseAndAtivo(@Param(&quot;especialidade&quot;) String especialidade);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/service/HospitalService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/java/com/fiap/techchallenge/hospital_service/core/service/HospitalService.java" />
              <option name="originalContent" value="package com.fiap.techchallenge.hospital_service.core.service;&#10;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalRequest;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalResponse;&#10;import com.fiap.techchallenge.hospital_service.core.entity.Hospital;&#10;import com.fiap.techchallenge.hospital_service.core.mapper.HospitalMapper;&#10;import com.fiap.techchallenge.hospital_service.core.repository.HospitalRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class HospitalService {&#10;&#10;    private final HospitalRepository hospitalRepository;&#10;    private final HospitalMapper hospitalMapper;&#10;&#10;    public HospitalResponse criarHospital(HospitalRequest request) {&#10;        Hospital hospital = hospitalMapper.toEntity(request);&#10;        Hospital hospitalSalvo = hospitalRepository.save(hospital);&#10;        return hospitalMapper.toResponse(hospitalSalvo);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;HospitalResponse&gt; listarTodosHospitais() {&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findAllAtivos();&#10;        return hospitais.stream()&#10;                .map(hospitalMapper::toResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public HospitalResponse buscarPorId(String id) {&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#10;        return hospitalMapper.toResponse(hospital);&#10;    }&#10;&#10;    public HospitalResponse atualizarHospital(String id, HospitalRequest request) {&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#10;&#10;        hospitalMapper.updateEntity(hospital, request);&#10;        Hospital hospitalAtualizado = hospitalRepository.save(hospital);&#10;        return hospitalMapper.toResponse(hospitalAtualizado);&#10;    }&#10;&#10;    public void deletarHospital(String id) {&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#10;&#10;        hospital.setAtivo(false);&#10;        hospitalRepository.save(hospital);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;HospitalResponse&gt; buscarPorNome(String nome) {&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findByNomeContainingIgnoreCaseAndAtivo(nome);&#10;        return hospitais.stream()&#10;                .map(hospitalMapper::toResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;HospitalResponse&gt; buscarPorEspecialidade(String especialidade) {&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findByEspecialidadesContainingIgnoreCaseAndAtivo(especialidade);&#10;        return hospitais.stream()&#10;                .map(hospitalMapper::toResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fiap.techchallenge.hospital_service.core.service;&#13;&#10;&#13;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalRequest;&#13;&#10;import com.fiap.techchallenge.hospital_service.core.dto.HospitalResponse;&#13;&#10;import com.fiap.techchallenge.hospital_service.core.entity.Hospital;&#13;&#10;import com.fiap.techchallenge.hospital_service.core.mapper.HospitalMapper;&#13;&#10;import com.fiap.techchallenge.hospital_service.core.repository.HospitalRepository;&#13;&#10;import lombok.RequiredArgsConstructor;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.transaction.annotation.Transactional;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Service&#13;&#10;@RequiredArgsConstructor&#13;&#10;@Transactional&#13;&#10;public class HospitalService {&#13;&#10;&#13;&#10;    private final HospitalRepository hospitalRepository;&#13;&#10;    private final HospitalMapper hospitalMapper;&#13;&#10;&#13;&#10;    public HospitalResponse criarHospital(HospitalRequest request) {&#13;&#10;        Hospital hospital = hospitalMapper.toEntity(request);&#13;&#10;        Hospital hospitalSalvo = hospitalRepository.save(hospital);&#13;&#10;        return hospitalMapper.toResponse(hospitalSalvo);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional(readOnly = true)&#13;&#10;    public List&lt;HospitalResponse&gt; listarTodosHospitais() {&#13;&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findAllAtivos();&#13;&#10;        return hospitais.stream()&#13;&#10;                .map(hospitalMapper::toResponse)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional(readOnly = true)&#13;&#10;    public HospitalResponse buscarPorId(Long id) {&#13;&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#13;&#10;        return hospitalMapper.toResponse(hospital);&#13;&#10;    }&#13;&#10;&#13;&#10;    public HospitalResponse atualizarHospital(Long id, HospitalRequest request) {&#13;&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#13;&#10;&#13;&#10;        hospitalMapper.updateEntity(hospital, request);&#13;&#10;        Hospital hospitalAtualizado = hospitalRepository.save(hospital);&#13;&#10;        return hospitalMapper.toResponse(hospitalAtualizado);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deletarHospital(Long id) {&#13;&#10;        Hospital hospital = hospitalRepository.findByIdAndAtivo(id)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Hospital nÃ£o encontrado com ID: &quot; + id));&#13;&#10;&#13;&#10;        hospital.setAtivo(false);&#13;&#10;        hospitalRepository.save(hospital);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional(readOnly = true)&#13;&#10;    public List&lt;HospitalResponse&gt; buscarPorNome(String nome) {&#13;&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findByNomeContainingIgnoreCaseAndAtivo(nome);&#13;&#10;        return hospitais.stream()&#13;&#10;                .map(hospitalMapper::toResponse)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional(readOnly = true)&#13;&#10;    public List&lt;HospitalResponse&gt; buscarPorEspecialidade(String especialidade) {&#13;&#10;        List&lt;Hospital&gt; hospitais = hospitalRepository.findByEspecialidadesContainingIgnoreCaseAndAtivo(especialidade);&#13;&#10;        return hospitais.stream()&#13;&#10;                .map(hospitalMapper::toResponse)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hospital-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hospital-service/src/main/resources/application.yml" />
              <option name="originalContent" value="server:&#10;  port: 3000&#10;&#10;spring:&#10;  cloud:&#10;    config:&#10;      enabled: false&#10;      import-check:&#10;        enabled: false&#10;&#10;  kafka:&#10;    bootstrap-servers: ${KAFKA_BROKER:localhost:9092}&#10;    topic:&#10;      agendamento-criado: agendamento-criado&#10;      agendamento-editado: agendamento-editado&#10;    consumer:&#10;      group-id: hospital-group&#10;      auto-offset-reset: latest&#10;    producer:&#10;      key-serializer: org.apache.kafka.common.serialization.StringSerializer&#10;      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer&#10;      properties:&#10;        spring.json.use.type.headers: false&#10;        spring.json.add.type.headers: false&#10;&#10;  datasource:&#10;    driver-class-name: org.postgresql.Driver&#10;    url: ${DB_URI:jdbc:postgresql://hospital-db:5432/hospitais}&#10;    username: ${DB_USER:postgres}&#10;    password: ${DB_PASSWORD:postgres}&#10;    hikari:&#10;      maximum-pool-size: 10&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: create-drop&#10;      properties:&#10;        hibernate:&#10;          dialect: org.hibernate.dialect.PostgreSQLDialect&#10;&#10;logging:&#10;  level:&#10;    org.apache.kafka: INFO&#10;    org.hibernate: DEBUG&#10;" />
              <option name="updatedContent" value="server:&#10;  port: 3000&#10;&#10;spring:&#10;  cloud:&#10;    config:&#10;      enabled: false&#10;      import-check:&#10;        enabled: false&#10;&#10;  kafka:&#10;    bootstrap-servers: ${KAFKA_BROKER:localhost:9092}&#10;    topic:&#10;      agendamento-criado: agendamento-criado&#10;      agendamento-editado: agendamento-editado&#10;    consumer:&#10;      group-id: hospital-group&#10;      auto-offset-reset: latest&#10;    producer:&#10;      key-serializer: org.apache.kafka.common.serialization.StringSerializer&#10;      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer&#10;      properties:&#10;        spring.json.use.type.headers: false&#10;        spring.json.add.type.headers: false&#10;&#10;  datasource:&#10;    driver-class-name: org.postgresql.Driver&#10;    url: ${DB_URI:jdbc:postgresql://hospital-db:5432/hospitais}&#10;    username: ${DB_USER:postgres}&#10;    password: ${DB_PASSWORD:postgres}&#10;    hikari:&#10;      maximum-pool-size: 10&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: create-drop&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        show_sql: true&#10;        format_sql: true&#10;    show-sql: true&#10;&#10;logging:&#10;  level:&#10;    org.apache.kafka: INFO&#10;    org.hibernate: DEBUG&#10;    org.hibernate.SQL: DEBUG&#10;    org.hibernate.type.descriptor.sql.BasicBinder: TRACE" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>